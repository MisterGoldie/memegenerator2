import type { Context as Context_Hono, Input } from 'hono';
import type { FrameBaseContext, FrameContext } from '../types/context.js';
import type { Env } from '../types/env.js';
type GetFrameContextParameters<env extends Env = Env, path extends string = string, input extends Input = {}, _state = env['State']> = {
    context: FrameBaseContext<env, path, input>;
    contextHono: Context_Hono<env, path, input>;
    initialState?: ((c: FrameBaseContext<env>) => _state | Promise<_state>) | _state | undefined;
    origin: string;
};
type GetFrameContextReturnType<env extends Env = Env, path extends string = string, input extends Input = {}, _state = env['State']> = Promise<{
    context: FrameContext<env, path, input>;
    getState: () => _state;
}>;
export declare function getFrameContext<env extends Env, path extends string, input extends Input = {}, _state = env['State']>(parameters: GetFrameContextParameters<env, path, input, _state>): GetFrameContextReturnType<env, path, input, _state>;
export {};
//# sourceMappingURL=getFrameContext.d.ts.map