import { getRequestUrl } from './getRequestUrl.js';
import { verifyCastAction } from './verifyCastAction.js';
export async function requestBodyToCastActionBaseContext(c, { hub, verify = true, verifyOrigin = true, }) {
    const { trustedData, untrustedData } = (await c.req.json().catch(() => { })) || {};
    const url = getRequestUrl(c.req);
    const trustedCastActionData = await (async () => {
        if (verify === false)
            return null;
        if (!trustedData)
            return null;
        if (!hub)
            return null;
        try {
            const { castActionData } = await verifyCastAction({
                hub,
                frameUrl: untrustedData.url,
                trustedData,
                url: url.href,
                verifyOrigin,
            });
            return castActionData;
        }
        catch (err) {
            if (verify === 'silent')
                return null;
            throw err;
        }
    })();
    return {
        env: c.env,
        actionData: trustedCastActionData || untrustedData,
        req: c.req,
        var: c.var,
        verified: Boolean(trustedCastActionData),
    };
}
//# sourceMappingURL=requestBodyToCastActionBaseContext.js.map